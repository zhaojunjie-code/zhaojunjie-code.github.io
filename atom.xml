<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhaojunjie-code.github.io/</id>
    <title>杰</title>
    <updated>2021-04-29T14:51:34.923Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhaojunjie-code.github.io/"/>
    <link rel="self" href="https://zhaojunjie-code.github.io/atom.xml"/>
    <subtitle>前端探索</subtitle>
    <logo>https://zhaojunjie-code.github.io/images/avatar.png</logo>
    <icon>https://zhaojunjie-code.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 杰</rights>
    <entry>
        <title type="html"><![CDATA[axios]]></title>
        <id>https://zhaojunjie-code.github.io/post/axios/</id>
        <link href="https://zhaojunjie-code.github.io/post/axios/">
        </link>
        <updated>2021-04-29T11:39:50.000Z</updated>
        <content type="html"><![CDATA[<h1 id="get请求和post请求">get请求和post请求</h1>
<h2 id="基本操作为给定id1的user创建get请求在控制台输出">基本操作：为给定ID=1的user创建get请求,在控制台输出</h2>
<pre><code>axios({
    url:&quot;http://xxxxxxxxxxxxxxxxxxxxxxx&quot;,  //接口
    params:{
        id:'1',                                                
    },
    method:&quot;get&quot;,
}).then(res=&gt;{
    console.log(res);
});
</code></pre>
<h2 id="axiosget-为id1的user创建请求">axios.get 为ID=1的user创建请求</h2>
<pre><code>axios.get(&quot;http://xxxxxxxxxxxxxxx&quot;,{params:{ID:1}}).then(res=&gt;{
    console.log(res);                      //操作
}).catch(error=&gt;{
    console.log(error);                   //获取异常
})
</code></pre>
<h3 id="parmas是给url字符串的后面添加id1这样挺万能的但不够安全">parmas是给url字符串的后面添加ID=1,这样挺万能的但不够安全</h3>
<h2 id="axiospost-为id1的user创建请求">axios.post 为ID=1的user创建请求</h2>
<pre><code>axios.post(&quot;http://xxxxxxxxxxxxxxxxxxxx&quot;,{data:{
    name:1;
}}).then(res=&gt;{
    console.log(res);
}).catch(error=&gt;{
    console.log(error);
})
</code></pre>
<h3 id="axios使用post发送数据时默认是textplainjson对象而服务器接受的是字符流http默认提交数据的形式applicationx-www-form-urlencoded我们就要把content-type改为applicationx-www-form-urlencoded">axios使用post发送数据时,默认是text/plain，json对象，而服务器接受的是字符流，HTTP默认提交数据的形式application/x-www-form-urlencoded,我们就要把Content-Type改为application/x-www-form-urlencoded</h3>
<h3 id="解决方法建议使用qs-qsstringify是将对象-序列化成url的形式键值对的形式以进行拼接">解决方法建议:使用qs qs.stringify()是将对象 序列化成URL的形式，(键值对的形式)以&amp;进行拼接</h3>
<pre><code>npm install qs
import qs from 'qs'
</code></pre>
<pre><code>let postdata = {
    &quot;key1&quot;:&quot;values1&quot;,
    &quot;ID&quot;:&quot;1&quot;,
    &quot;name&quot;:&quot;张三&quot;,
};                                    //设置好你要以什么对象的请求
axios.post(&quot;http://xxxxxxxxxxxxxxxxxxxx&quot;,{data:qs.stringify(postdata)}).then        //使用qs.stringify()转换  (res=&gt;{
    console.log(res);
}).catch(error=&gt;{
    console.log(error);
})
</code></pre>
<h1 id="配置默认值">配置默认值</h1>
<pre><code>axios.default.baseURL = 'http://xxxxxxx';         //配置接口公共部分的数据
axios.default.headers.common['token'] = token;    //设置请求头
axios.default.headers.post['Content-Type'] = 'application/x-www-form-urlencoded''                              //设置post请求的格式
axios.default.timeout = 5000,                          //设置事件5秒</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS3-边框]]></title>
        <id>https://zhaojunjie-code.github.io/post/css3-bian-kuang/</id>
        <link href="https://zhaojunjie-code.github.io/post/css3-bian-kuang/">
        </link>
        <updated>2021-04-20T07:59:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="设置边框圆角-border-radius">设置边框圆角： border-radius:;</h1>
<p>赋值顺序：左上，右上，右下，左下；顺时针顺序<br>
4个值：左上，右上，右下，左下；<br>
3个值：左上，右上和左下，右下；<br>
2个值：左上和右下，右上和左下；<br>
1个值：四个角都。<br>
border-top-left-radius<br>
border-top-right-radius<br>
border-bottom-right-radius<br>
border-bottom-left-radius</p>
<h1 id="以上这些赋值方式是最基础的为边框的各角设置半径">以上这些赋值方式，是最基础的为边框的各角设置半径。</h1>
<p>具体原理是什么？<br>
<img src="https://zhaojunjie-code.github.io//post-images/1618908874817.png" alt="" loading="lazy"><br>
按照这样的方法，我们可以画出一个圆<br>
思路：设置宽高都相同，边框半径等于宽高的一半</p>
<pre><code class="language-js">#rcorners1 {
  width: 200px;
  height: 200px;
  border-radius: 100px;
  background: red;  
}
</code></pre>
<p>效果：<br>
<img src="https://zhaojunjie-code.github.io//post-images/1618909689791.PNG" alt="" loading="lazy"></p>
<h1 id="设置椭圆角border-radius">设置椭圆角：border-radius: /  ;</h1>
<p>讲到设置椭圆角，就不得不提到垂直半径和水平半径<br>
理解了上面那幅图，下面就好理解了<br>
<img src="https://zhaojunjie-code.github.io//post-images/1618910229189.png" alt="" loading="lazy"><br>
在刚才设置border-radius:;的基础上，可为一个变设置椭圆角比如  10px/20px;它代表把这个角看成椭圆，椭圆水平半径为10px，垂直半径20px。<br>
使用椭圆角后，边框各角的样式就更丰富了，椭圆包含圆。</p>
<h1 id="边框图像">边框图像</h1>
<p>border-image:;<br>
border-image-source:url();   图像源<br>
border-image-slice:;             怎样切割图像，类似margin<br>
border-image-repeat:stretch,round,repeat;          图像是拉伸，平铺还是重复</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-特异性]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-te-yi-xing/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-te-yi-xing/">
        </link>
        <updated>2021-04-19T16:32:54.000Z</updated>
        <content type="html"><![CDATA[<h1 id="特异性是css同时为某一元素设置了多种属性这样会冲突-而浏览器总是会执行特异性高的那个语句">特异性是，CSS同时为某一元素设置了多种属性，这样会冲突。而浏览器总是会执行特异性高的那个语句。</h1>
<h2 id="行内样式-标签内style">行内样式： 标签内style=&quot;&quot;</h2>
<h2 id="id-页面元素唯一标识符-navigation">ID： 页面元素唯一标识符 #navigation</h2>
<h2 id="类-属性-伪类classes-attributeshover-focus">类、属性、伪类：.classes; [attributes];:hover、:focus</h2>
<h2 id="元素和伪元素h1paimgbefore-after">元素和伪元素：h1,p,a,img;::before、::after</h2>
<h2 id="比较特异性">比较特异性</h2>
<p>从0开始，如果把元素和伪元素的特异性看成1；那么类、属性、伪类为10； ID为100；行内样式为1000；</p>
<h2 id="特异性规则">特异性规则</h2>
<ol>
<li>特异性相同的情况下,执行后一条<br>
比如说，写了</li>
</ol>
<pre><code class="language-js">h1 {background-color: yellow;}
h1 {background-color: red;}
</code></pre>
<p>浏览器执行后一条语句。按照为变量赋值的角度取理解<br>
2. ID选择器比属性选择器拥有更高的优先级；具体的ID选择器拥有更高的属性</p>
<pre><code class="language-js">div#a {background-color: green;}
#a {background-color: yellow;}
div[id=a] {background-color: blue;}
</code></pre>
<p>第一条较具体，所以执行具体的ID选择器。<br>
3. 上下文选择器比单一元素选择器更具体(在html里写的样式，总是比从外部导入.css文件的特异性更高)<br>
4. 类选择器会打败任意数量的元素选择器。(别看类选择器是10,元素选择器是1，难道又11个元素选择器，就执行元素选择器的内容吗)，规定，类选择器会打败任意数量的元素选择器。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-网页布局、单位]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-wang-ye-bu-ju-dan-wei/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-wang-ye-bu-ju-dan-wei/">
        </link>
        <updated>2021-04-19T16:02:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="设置并排列宽相等的列用100并排的几个列取百分号">设置并排列宽相等的列用100/并排的几个列取百分号</h1>
<h1 id="设置并排不等列宽的列保证中间部分为核心部分一般中间部分占据的百分比大一些">设置并排不等列宽的列保证中间部分为核心部分，一般中间部分占据的百分比大一些。</h1>
<h1 id="绝对单位长度是定死的">绝对单位：长度是定死的</h1>
<p>96px=2.54cm</p>
<h1 id="相对长度长度是相对的">相对长度：长度是相对的</h1>
<p>em:相对于字体大小font-size;<br>
2em=2*font-size<br>
rem:相对于根元素字体的大小font-size</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-网页布局]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-wang-ye-bu-ju/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-wang-ye-bu-ju/">
        </link>
        <updated>2021-04-19T16:02:29.000Z</updated>
        <content type="html"><![CDATA[<h1 id="设置并排的列用100并排的几个列取百分号">设置并排的列用100/并排的几个列取百分号</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-计数器]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-ji-shu-qi/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-ji-shu-qi/">
        </link>
        <updated>2021-04-19T15:36:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="counter-reset-count-设置计数器">counter-reset: count;  设置计数器</h1>
<h1 id="注意此语句为创建一个计数器计数器名为count-那么这条语句写在自己身上还是哪里呢">注意，此语句为创建一个计数器，计数器名为count。那么这条语句写在自己身上还是哪里呢？</h1>
<p>当然是写在自己的父元素身上，父元素创建计数器，监控子元素的个数</p>
<h1 id="counter-incrementcount-计数器加一">counter-increment:count;  计数器加一</h1>
<h1 id="注意此语句在子元素中写着-当遇到子元素则计数器1">注意，此语句在子元素中写着。当遇到子元素，则计数器+1.</h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-属性选择器]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-shu-xing-xuan-ze-qi/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-shu-xing-xuan-ze-qi/">
        </link>
        <updated>2021-04-19T13:57:17.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-js">a[target=&quot;_blank&quot;]{
    background-color:yellow;
}
&lt;a href=&quot;https://www.w3school.com.cn&quot;&gt;w3school.com.cn&lt;/a&gt;
&lt;a href=&quot;http://www.disney.com&quot; target=&quot;_blank&quot;&gt;disney.com&lt;/a&gt;
</code></pre>
<p>注意观察代码，第二个a标签，设置了target，对应于属性选择器中的target=&quot;_blank&quot;。所以只会修饰这个a标签。</p>
<h1 id="input标签很常用">input标签很常用</h1>
<pre><code class="language-js">[class^=&quot;top&quot;] {                  //class选择器名字以top开头的的所有元素进行修饰

}
input[type=&quot;text&quot;] {         //input标签，是文本输入框的进行修饰

}
input[type=&quot;button&quot;] {      //input标签，是按钮的进行修饰

}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS应用-粘性导航栏、下拉菜单]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-ying-yong-nian-xing-dao-hang-lan-xia-la-cai-dan/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-ying-yong-nian-xing-dao-hang-lan-xia-la-cai-dan/">
        </link>
        <updated>2021-04-19T11:01:53.000Z</updated>
        <content type="html"><![CDATA[<p>提起粘性，我们想到了position:fixed;这是实现粘性布局的方法，被修饰的元素好像黏在了网页上，不随鼠标scroll。<br>
有一种粘性的导航栏，我们一定见过，当鼠标下滚动使，我们看到的导航栏距离页面顶部距离为0时，此时，导航栏就像黏在上面一样，当我们上滚动鼠标，到一定距离时，他又开始随鼠标动起来。这就是粘性导航栏。</p>
<h1 id="用到了相对定位方法">用到了相对定位方法</h1>
<pre><code class="language-js">position:sticky;
top:0;
</code></pre>
<p>粘性元素会根据滚动位置在相对和固定之间切换。它是相对定位的，直到在视口中遇到给定的偏移位置为止</p>
<h1 id="下拉菜单">下拉菜单</h1>
<p>.dropdown{}<br>
.dropdown-content{}<br>
设置两个样式，其中-content，是隐藏的菜单，初始应该为display:none;需要后续的js修改其值不为none，或者CSS用hover修饰，当鼠标移到父元素身上，子元素display:block;；还要设置z-index:;(重叠顺序)，应该越大越好，才能看到下拉菜单；还有一个最关键的样式-定位！我们能够想到，父元素相对定位，下拉菜单绝对定位；如果不设置子元素的相对位置，默认出现在父元素的下方。</p>
<pre><code class="language-js">.dropdown {
position: relative;
display: inline-block;
}

.dropdown-content {
display: none;
position: absolute;
background-color: #f9f9f9;
min-width: 160px;
box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
padding: 12px 16px;
z-index: 1;
}

.dropdown:hover .dropdown-content {
display: block;
}
</code></pre>
<p><img src="https://zhaojunjie-code.github.io//post-images/1618832969931.PNG" alt="" loading="lazy"><br>
注意：html写法</p>
<pre><code class="language-js">&lt;div class=&quot;dropdown&quot;&gt;
  &lt;span&gt;Mouse over me&lt;/span&gt;
  &lt;div class=&quot;dropdown-content&quot;&gt;    //仍然被包含在里面
    &lt;p&gt;Hello World!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>注意：下拉菜单默认是左对齐的，如果需要右对齐设置right:0;</p>
<pre><code class="language-javascript">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;style&gt;
    ul {
        background-color: grey;
        overflow: hidden;
        list-style: none;
    }
    li {
        float: left;
    }
    a {
        padding: 14px 16px;
        color: white;
        text-align: center;
        text-decoration: none;
        display: block;                /*加入可设置宽高*/
    }
    li a:hover {
        background-color: yellowgreen;
    }
    .content {
        display: none;
        position: absolute;
        z-index: 1;
        background-color: white;
        min-width: 120px;
        box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
    }
    .content a{
        color: black;
        padding: 14px 16px;
        text-align: left;
        display: block;
    }
    .down:hover .content {
        display: block;
    }
    .content a:hover {
        background-color: #f1f1f1;
    }
&lt;/style&gt;
&lt;body&gt;
    &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;Home&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;&quot;&gt;News&lt;/a&gt;&lt;/li&gt;
        &lt;li class=&quot;down&quot;&gt;
            &lt;a href=&quot;&quot;&gt;Dropdown&lt;/a&gt;
            &lt;div class=&quot;content&quot;&gt;
                &lt;a href=&quot;&quot;&gt;linl1&lt;/a&gt;&lt;a href=&quot;&quot;&gt;link2&lt;/a&gt;&lt;a href=&quot;&quot;&gt;link3&lt;/a&gt;
            &lt;/div&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-opacity不透明度]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-opacity-bu-tou-ming-du/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-opacity-bu-tou-ming-du/">
        </link>
        <updated>2021-04-19T07:32:37.000Z</updated>
        <content type="html"><![CDATA[<h1 id="opacity用于指定元素的不透明度00-10值越小越透明0表示完全透明1表示不透明">opacity用于指定元素的不透明度：0.0-1.0值越小，越透明.0表示完全透明，1表示不透明</h1>
<h2 id="可以应用在轮播图的切换效果中">可以应用在轮播图的切换效果中。</h2>
<h3 id="图片叠在一起设置计时器使上面一张图片的不透明度从1渐变到0下面的图片就显示出来了">图片叠在一起，设置计时器，使上面一张图片的不透明度从1渐变到0，下面的图片就显示出来了</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS-伪类]]></title>
        <id>https://zhaojunjie-code.github.io/post/css-wei-lei/</id>
        <link href="https://zhaojunjie-code.github.io/post/css-wei-lei/">
        </link>
        <updated>2021-04-19T06:27:46.000Z</updated>
        <content type="html"><![CDATA[<h1 id="伪类用于定义元素的特殊状态">伪类用于定义元素的特殊状态</h1>
<p>伪类语法</p>
<pre><code class="language-js">selector:pseudo-class {
    property:value;
}
</code></pre>
<h2 id="悬停ahover当鼠标停在a链接上a会出现的效果同理悬停在div上divhover">悬停：a:hover{}当鼠标停在a链接上，a会出现的效果；同理，悬停在div上div:hover{},</h2>
<h2 id="工具提示悬停鼠标停在div上显示p的效果">工具提示悬停：鼠标停在div上，显示p的效果</h2>
<pre><code class="language-js">p {
  display: none;
  background-color: yellow;
  padding: 20px;
}

div:hover p {
  display: block;
}
</code></pre>
<h1 id="first-child伪类与指定的元素匹配并规定该元素是另一个元素的第一个子元素">:first-child伪类：与指定的元素匹配，并规定：该元素是另一个元素的第一个子元素</h1>
<h1 id="注意处在-first-child-的前一个选择器是第一个子元素例如-ifirst-childi是第一个子元素p-ifirst-child在p中的第一个子元素i">注意：处在 :first-child 的前一个选择器，是第一个子元素；例如 i:first-child,i是第一个子元素；p i:first-child，在p中的第一个子元素i。</h1>
<h1 id="p-first-child-i这种写法第一个子元素是p要修饰的内容是p里面的i">p :first-child i,这种写法，第一个子元素是p，要修饰的内容是p里面的i</h1>
<p>三个例子</p>
<ol>
<li>匹配首个p元素</li>
</ol>
<pre><code class="language-js">p:first-child {
    color: blue;
}
</code></pre>
<ol start="2">
<li>匹配所有p元素的首个i元素</li>
</ol>
<pre><code class="language-js">p i:first-child {
    color:blue;
}
</code></pre>
<p>3.匹配所有首个p元素中的所有i元素</p>
<pre><code class="language-js">p :first-child i {
    color:blue;
}
</code></pre>
<h1 id="lang伪类允许您为不同的语言定义特殊的规则">:lang伪类：允许您为不同的语言定义特殊的规则。</h1>
<pre><code class="language-js">q:lang(en) {
  quotes: &quot;~&quot; &quot;~&quot;;
}
&lt;p&gt;Some text &lt;q lang=&quot;no&quot;&gt;A quote in a paragraph&lt;/q&gt; Some text.&lt;/p&gt;
</code></pre>
<p>效果：被q lang=&quot;no&quot;双标签包起来的元素：首尾加上了&quot;~&quot;号<br>
<img src="https://zhaojunjie-code.github.io//post-images/1618815815051.PNG" alt="" loading="lazy"></p>
<h1 id="focus伪类为input标签渲染获取焦点时的效果">:focus伪类：为input标签，渲染获取焦点时的效果</h1>
<pre><code class="language-js">input:focus{
    background-color:yellow;
}
</code></pre>
<p>效果：当鼠标点击input框时，input框背景颜色边黄</p>
<h1 id="xbefore伪类-为所有x标签的内容之前是一个块添加样式-用content添加文本">X::before伪类: 为所有X标签的内容之前（是一个块）添加样式 用content:&quot;&quot;;添加文本，</h1>
<pre><code class="language-js">p:before{
    content:&quot;台词：！&quot;:
}
&lt;p&gt;你这个叛徒&lt;/p&gt;
</code></pre>
<p>效果：p标签渲染后的效果 ”台词：！你这个叛徒“</p>
<h1 id="xfirst-letter伪类-首字母大写">X::first-letter伪类: 首字母大写</h1>
<pre><code class="language-js">p:first-letter{
    font-size:200%;
}
&lt;p&gt;hello&lt;/p&gt;
</code></pre>
<p>效果：Hello</p>
<h1 id="selection伪类用户选择时的效果用户在网页上用鼠标选择一段文本进行复制通常文本的背景颜色会变蓝">::selection伪类：用户选择时的效果；用户在网页上用鼠标选择一段文本进行复制，通常文本的背景颜色会变蓝</h1>
<pre><code class="language-js">::selection {
    bakground-color:blue;
}
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://zhaojunjie-code.github.io//post-images/1618816689269.PNG" alt="" loading="lazy"></figure>
<h1 id="伪元素伪元素用于设置元素指定部分的样式">伪元素：伪元素用于设置元素指定部分的样式。</h1>
<h1 id="注意双冒号">注意双冒号 ::</h1>
<h2 id="first-letter-伪元素用于向文本的首字母添加特殊样式">::first-letter 伪元素用于向文本的首字母添加特殊样式。</h2>
<h2 id="first-line-伪元素用于向文本的首行添加特殊样式">::first-line 伪元素用于向文本的首行添加特殊样式。</h2>
<h2 id="伪元素和-css-类">伪元素和 CSS 类</h2>
<pre><code class="language-js">.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}
</code></pre>
<p>效果:为class=&quot;intro&quot;的类，首字母大写并设置颜色#ff0000</p>
<h2 id="多个伪元素一个标签或一个类可以组合使用多个伪元素">多个伪元素：一个标签或一个类可以组合使用多个伪元素</h2>
<h2 id="before伪元素">::before伪元素</h2>
<p>content:;<br>
可以添加文本: &quot;用引号括起来可以在一个标签或者一个类之前添加文本&quot;<br>
可以添加图片:&quot;url(smiley.gif);</p>
]]></content>
    </entry>
</feed>